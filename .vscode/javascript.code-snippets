{
    "Backend Read": {
        "prefix": ["backend-r"],
        "body": [
            "const ${1:NamaFungsi} = async (req, res) => {",
            "\tconst logger = res.locals.logger;",
            "\ttry{",
            "\t\t${2}",
            "\t\tconst tempres = {",
            "\t\t",
            "\t\t};",
            "\t\tres.status(200).send({",
            "\t\t\tmsg: 'Success',",
            "\t\t\tcode: 200,",
            "\t\t\tdata: tempres,",
            "\t\t\tsuccess: true",
            "\t\t});",
            "\t} catch (error) {",
            "\t\tlogger.error(error);",
            "\t\tres.status(error.httpcode || 500).send({",
            "\t\t\tmsg: error.message,",
            "\t\t\tcode: error.httpcode || 500,",
            "\t\t\tdata: error,",
            "\t\t\tsuccess: false",
            "\t\t});",
            "\t}",
            "}"
        ],
        "description": "Komponen body next standar AniMemo"
    },
    "Backend Create Update Delete": {
        "prefix": ["backend-cud"],
        "body": [
            "const ${1:NamaFungsi} = async (req, res) => {",
            "\tconst logger = res.locals.logger;",
            "\ttry{",
            "\t\tawait db.sequelize.transaction(async (transaction) => {",
            "\t\t\t${2}",
            "\t\t});",
            "\t\t",
            "\t\tconst tempres = {",
            "\t\t",
            "\t\t};",
            "\t\tres.status(200).send({",
            "\t\t\tmsg: 'Sukses',",
            "\t\t\tcode: 200,",
            "\t\t\tdata: tempres,",
            "\t\t\tsuccess: true",
            "\t\t});",
            "\t} catch (error) {",
            "\t\tlogger.error(error);",
            "\t\tres.status(error.httpcode || 500).send({",
            "\t\t\tmsg: error.message || 'Gagal',",
            "\t\t\tcode: 500,",
            "\t\t\tdata: error,",
            "\t\t\tsuccess: false",
            "\t\t});",
            "\t}",
            "}"
        ],
        "description": "Komponen body next standar AniMemo"
    },
    "Backend Create SS": {
        "prefix": ["backend-satu-sehat"],
        "body": [
            "const ${1:NamaFungsi} = wrapperSatuSehat(",
            "\tasync (logger, ssClient, ${2:params}) => {",
            "\t}",
            ")"
        ],
        "description": "Komponen body satu sehat"
    },
    "Frontend Custom Select": {
        "prefix": "frontend-custom-select",
        "body": [
            "<CustomSelect",
            "\tid=\"${2:DataName}\"",
            "\tname=\"${2:DataName}\"",
            "\toptions={${3:[]}}",
            "\tonChange={(e) => {",
            "\t\t${1:ValidationName}.setFieldValue('${2:DataName}', e?.value || '')",
            "\t}}",
            "\tvalue={${1:ValidationName}.values.${2:DataName}}",
            "\tonBlur={${1:ValidationName}.handleBlur}"
            "\tclassName={`input row-header \\${",
            "\t\t!!${1:ValidationName}?.errors.${2:DataName} ? 'is-invalid' : ''",
            "\t}`}",
            "\t/>",
            "{${1:ValidationName}.touched.${2:DataName} &&",
            "\t!!${1:ValidationName}.errors.${2:DataName} && (",
            "\t\t<FormFeedback type=\"invalid\">",
            "\t\t\t<div>{${1:ValidationName}.errors.${2:DataName}}</div>",
            "\t\t</FormFeedback>",
            "\t)}"
        ],
        "description": "Komponen custom select"
    },
    "Frontend Kontainer Flatpickr": {
        "prefix": "frontend-flatpickr",
        "body": [
            "<KontainerFlatpickr",
            "\tisError={${1:ValidationName}.touched?.${2:DataName} &&",
            "\t\t!!${1:ValidationName}.errors?.${2:DataName}}",
            "\tid=\"${2:DataName}\"",
            "\toptions={{",
            "\tdateFormat: 'Y-m-d',",
            "\tdefaultDate: 'today',",
            "\t}}",
            "\tonBlur={${1:ValidationName}.handleBlur}"
            "\tvalue={${1:ValidationName}.values.${2:DataName}}",
            "\tonChange={([newDate]) => {",
            "\t\t${1:ValidationName}.setFieldValue('${2:DataName}', newDate.toISOString())",
            "\t}}",
            "/>",
            "{${1:ValidationName}.touched?.${2:DataName}",
            "\t&& !!${1:ValidationName}.errors.${2:DataName} && (",
            "\t\t<FormFeedback type=\"invalid\">",
            "\t\t\t<div>{${1:ValidationName}.errors.${2:DataName}}</div>",
            "\t\t</FormFeedback>",
            "\t)}"
        ],
        "description": "Komponen kontainer flatpickr"
    },
    "Frontend Input Number": {
        "prefix": "frontend-input-number",
        //create snippet from above
        "body": [
            "<Input",
            "\tid=\"${2:DataName}\"",
            "\tname=\"${2:DataName}\"",
            "\ttype=\"text\"",
            "\tvalue={${1:ValidationName}.values.${2:DataName}}",
            "\tonBlur={${1:ValidationName}.handleBlur}"
            "\tonChange={(e) => {",
            "\t\tconst newVal = onChangeStrNbr(",
            "\t\t\te.target.value,",
            "\t\t\t${1:ValidationName}.values.${2:DataName}",
            "\t\t)",
            "\t\t${1:ValidationName}.setFieldValue('${2:DataName}', newVal)",
            "\t}}",
            "\tinvalid={${1:ValidationName}.touched?.${2:DataName} &&",
            "\t\t!!${1:ValidationName}.errors?.${2:DataName}}",
            "/>",
            "{${1:ValidationName}.touched?.${2:DataName}",
            "\t&& !!${1:ValidationName}.errors.${2:DataName} && (",
            "\t\t<FormFeedback type=\"invalid\">",
            "\t\t\t<div>{${1:ValidationName}.errors.${2:DataName}}</div>",
            "\t\t</FormFeedback>",
            "\t)}"
        ],
        "description": "Komponen input number"
    },
    "Frontend Input Text": {
        "prefix": "frontend-input-text",
        "body": [
            "<Input",
            "\tid=\"${2:DataName}\"",
            "\tname=\"${2:DataName}\"",
            "\ttype=\"text\"",
            "\tvalue={${1:ValidationName}.values.${2:DataName}}",
            "\tonChange={(e) => {",
            "\t\t${1:ValidationName}.setFieldValue('${2:DataName}', e.target.value)",
            "\t}}",
            "\tinvalid={${1:ValidationName}.touched?.${2:DataName} &&",
            "\t\t!!${1:ValidationName}.errors?.${2:DataName}}",
            "/>",
            "{${1:ValidationName}.touched?.${2:DataName}",
            "\t&& !!${1:ValidationName}.errors.${2:DataName} && (",
            "\t\t<FormFeedback type=\"invalid\">",
            "\t\t\t<div>{${1:ValidationName}.errors.${2:DataName}}</div>",
            "\t\t</FormFeedback>",
            "\t)}"
        ],
        "description": "Komponen input text"
    },
    "Frontend Date Now": {
        "prefix": "frontend-date-now",
        "body": ["const [dateNow] = useState(() => new Date().toISOString())"],
        "description": "Komponen date now"
    },
    "Frontend Formik": {
        "prefix": "frontend-formik",
        "body": [
            "const ${1:ValidationName} = useFormik({",
            "\tinitialValues: {",
            "\t\t",
            "\t},",
            "\tvalidationSchema: Yup.object({",
            "\t\t",
            "\t}),",
            "\tonSubmit: (values) => {",
            "\t\t",
            "\t},",
            "})"
        ],
        "description": "Komponen formik"
    },
    "Redux Crate Slice": {
        "prefix": "frontend-redux-slice",
        "body": [
            "import { createSlice } from \"@reduxjs/toolkit\"",
            "",
            "const initState = {",
            "",
            "}",
            "",
            "const ${1:SliceName}Slice = createSlice({",
            "\tname: \"${1:SliceName}\",",
            "\tinitialState: initState,",
            "\treducers: (create) => ({",
            "\t\tresetAll: (state) => {",
            "\t\t\treturn initState",
            "\t\t},",
            "\t\t",
            "\t\t",
            "\t}),",
            "})",
            "",
            "export const {",
            "\t",
            "} = ${1:SliceName}Slice.actions",
            "",
            "export default ${1:SliceName}Slice.reducer"
        ],
        "description": "Redux Crate Slice"
    },
    "Frontend Redux Reducer Api Read": {
        "prefix": "frontend-redux-r",
        "body": [
            "${1:fnReduxAction}: create.preparedReducer(",
            "\t(queries) => {",
            "\t\treturn {",
            "\t\t\tpayload: {",
            "\t\t\t\tqueries",
            "\t\t\t}",
            "\t\t}",
            "\t},",
            "\t(state, action) => {",
            "\t\tstate.${2:DataName}.data = null",
            "\t\tstate.${2:DataName}.loading = true",
            "\t}",
            "),",
            "${1:fnReduxAction}Success: (state, action) => {",
            "\tstate.${2:DataName}.data = action.payload",
            "\tstate.${2:DataName}.loading = false",
            "},",
            "${1:fnReduxAction}Error: (state, action) => {",
            "\tstate.${2:DataName}.error = action.payload",
            "\tstate.${2:DataName}.loading = false",
            "},"
        ],
        "description": "Frontend Redux Reducer Api Call"
    },
    "Frontend Redux Reducer Api CUD": {
        "prefix": "frontend-redux-cud",
        "body": [
            "${1:fnReduxAction}: create.preparedReducer(",
            "\t(data, callback) => {",
            "\t\treturn {",
            "\t\t\tpayload: {",
            "\t\t\t\tdata,",
            "\t\t\t\tcallback",
            "\t\t\t}",
            "\t\t}",
            "\t},",
            "\t(state, action) => {",
            "\t\tstate.${2:DataName}.data = null",
            "\t\tstate.${2:DataName}.loading = true",
            "\t}",
            "),",
            "${1:fnReduxAction}Success: (state, action) => {",
            "\tstate.${2:DataName}.data = action.payload",
            "\tstate.${2:DataName}.loading = false",
            "},",
            "${1:fnReduxAction}Error: (state, action) => {",
            "\tstate.${2:DataName}.error = action.payload",
            "\tstate.${2:DataName}.loading = false",
            "},"
        ],
        "description": "Frontend Redux Reducer Api Call"
    },
    "Frontend Redux Initial State Data Name": {
        "prefix": "frontend-redux-init",
        "body": [
            "${1:DataName}: {",
            "\tdata: null,",
            "\tloading: false,",
            "\terror: null",
            "}"
        ],
        "description": "Frontend Redux Initial State Data Name"
    },
    "Frontend Redux Saga Get": {
        "prefix": "frontend-redux-saga-r",
        "body": [
            "function* on${1:FnName}({payload: {queries}}) {",
            "\ttry{",
            "\t\tconst response = yield call(${3:ServiceName}.${2:ServiceFnName}, queries);",
            "\t\tyield put(${4:fnReduxAction}Success(response.data));",
            "\t} catch (error) {",
            "\t\tyield put(${4:fnReduxAction}Error(error));",
            "\t}",
            "}",
            "",
            "export function* watch${1:FnName}() {",
            "\tyield takeEvery(${4:fnReduxAction}.type, on${1:FnName});",
            "}",
            ""
        ],
        "description": "Frontend Redux Saga Get"
    },
    "Frontend Redux Saga CUD": {
        "prefix": "frontend-redux-saga-cud",
        "body": [
            "function* on${1:FnName}({payload: {data, callback}}) {",
            "\ttry{",
            "\t\tconst response = yield call(${2:ServiceName}.${3:fnServiceName}, data);",
            "\t\tyield put(${4:fnReduxAction}Success(response.data));",
            "\t\tcallback && callback(response.data)",
            "\t\ttoast.success(response.data.msg || \"Sukses\", { autoClose: 3000} )",
            "\t} catch (error) {",
            "\t\tyield put(${4:fnReduxAction}Error(error));",
            "\t\ttoast.error(error?.response?.data?.msg || \"Error\", { autoClose: 3000 });",
            "\t}",
            "}",
            "",
            "export function* watchOn${1:FnName}() {",
            "\tyield takeEvery(${4:fnReduxAction}.type, on${1:FnName});",
            "}",
            ""
        ],
        "description": "Frontend Redux Saga Get"
    }
}
